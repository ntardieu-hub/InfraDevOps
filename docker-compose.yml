# Version Docker
version: '3.7'
services:
  setup:
    image: ubuntu
    build: .
  reverse-proxy:
    # nom de l'image à pull
    # :latest -> va pull la dernière version connue
    image: nginx:latest
    # les volumes à transférer au container
    # <chemin de votre fichier>:<chemin de destination dans le container>
    volumes:
      - ./reverse_proxy/nginx.conf:/etc/nginx/nginx.conf
      - ./www/index.html:/usr/share/nginx/html/index.html
    # Déclaration & mapping des ports alloués pour le reverse proxy vers les containers
    # <port de la machine>:<port du container>
    ports:
      - 80:80
    # En cas de crash, cette propriété demande à Nginx de redémarrer en permanence
    restart: always

  buildbot:
    image: buildbot/buildbot-master:master
    # Déclaration du fichier contenant les variables d'environnements
    env_file:
      - db.env
    # Déclaration de plusieurs variables d'environnements applicable au container
    environment:
      - BUILDBOT_CONFIG_DIR=config
      - BUILDBOT_CONFIG_URL=https://github.com/buildbot/buildbot-docker-example-config/archive/master.tar.gz
      - BUILDBOT_WORKER_PORT=9989
      - BUILDBOT_WEB_URL=http://127.0.0.1:8010/
      - BUILDBOT_WEB_PORT=tcp:port=8010
    ports:
      - 8010:8010
    # Déclare quel(s) est (sont) le(s) container(s) dont le courant dépend
    depends_on:
      - db

  db:
    env_file:
      - db.env
    image: "postgres:9.4"
    ports:
      - 5432:5432

  worker:
    image: "buildbot/buildbot-worker:master"
    environment:
      BUILDMASTER: buildbot
      BUILDMASTER_PORT: 9989
      WORKERNAME: example-worker
      WORKERPASS: pass
      WORKER_ENVIRONMENT_BLACKLIST: DOCKER_BUILDBOT* BUILDBOT_ENV_* BUILDBOT_1* WORKER_ENVIRONMENT_BLACKLIST

    depends_on:
      - buildbot

  prometheus:
    image: prom/prometheus:latest
    volumes:
        - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
        - "./prometheus/file_sd_configs.yml:/etc/prometheus/file_sd_configs.yml"
    command:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - --web.external-url=http://127.0.0.1:9090
        - --web.route-prefix=/
    depends_on:
        - cadvisor
    ports:
        - 9090:9090

  node_exporter:
    image: prom/node-exporter
    ports:
        - 9100:9100

  alertmanager:
    image: prom/alertmanager
    deploy:
      replicas: 1
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'

  cadvisor:
    image: gcr.io/google-containers/cadvisor:latest
    volumes:
        - /:/rootfs:ro
        - /var/run:/var/run:rw
        - /sys/:/sys/:ro
        - /var/lib/docker/:/var/lib/docker:ro
    ports: 
      - 8080:8080
    depends_on:
      - redis

  redis:
    image: redis:latest

  grafana:
    image: grafana/grafana:latest
    environment:
        - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
        - prometheus
    ports:
        - 3000:3000

  sonarqube:
    image: sonarqube:7.9-community
    environment:
      - SONARQUBE_JDBC_USERNAME=sonar
      - SONARQUBE_JDBC_PASSWORD=sonar
    depends_on:
      - sonarDb
    ports:
      - "9000:9000"

  sonarscanner:
    container_name: sonarscanner
    image: newtmitch/sonar-scanner
    depends_on:
      - sonarqube
    environment:
      - SONAR_PROJECT_KEY=dummy
      - SONAR_PROJECT_NAME=dummy
      - SONAR_PROJECT_VERSION=0.1
    restart: on-failure
    volumes:
      - ./src:/usr/src
      - ./sonarqube/:/usr/lib/sonar-scanner/conf/

  sonarDb:
    container_name: sonarDb
    image: postgres
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar5433
    ports:
        - 5433:5433